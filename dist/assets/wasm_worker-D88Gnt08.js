let i;const a=typeof TextDecoder<"u"?new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0}):{decode:()=>{throw Error("TextDecoder not available")}};typeof TextDecoder<"u"&&a.decode();let r=null;function f(){return(r===null||r.byteLength===0)&&(r=new Uint8Array(i.memory.buffer)),r}function b(e,t){return e=e>>>0,a.decode(f().subarray(e,e+t))}function l(e,t){return i.add(e,t)}function d(e,t){return i.subtract(e,t)}function g(e,t){return i.multiply(e,t)}function u(e){const t=i.__wbindgen_export_0.get(e);return i.__externref_table_dealloc(e),t}function p(e,t){const n=i.divide(e,t);if(n[2])throw u(n[1]);return n[0]}async function y(e,t){if(typeof Response=="function"&&e instanceof Response){if(typeof WebAssembly.instantiateStreaming=="function")try{return await WebAssembly.instantiateStreaming(e,t)}catch(s){if(e.headers.get("Content-Type")!="application/wasm")console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",s);else throw s}const n=await e.arrayBuffer();return await WebAssembly.instantiate(n,t)}else{const n=await WebAssembly.instantiate(e,t);return n instanceof WebAssembly.Instance?{instance:n,module:e}:n}}function c(){const e={};return e.wbg={},e.wbg.__wbindgen_string_new=function(t,n){return b(t,n)},e.wbg.__wbindgen_init_externref_table=function(){const t=i.__wbindgen_export_0,n=t.grow(4);t.set(0,void 0),t.set(n+0,void 0),t.set(n+1,null),t.set(n+2,!0),t.set(n+3,!1)},e}function o(e,t){return i=e.exports,w.__wbindgen_wasm_module=t,r=null,i.__wbindgen_start(),i}function _(e){if(i!==void 0)return i;typeof e<"u"&&(Object.getPrototypeOf(e)===Object.prototype?{module:e}=e:console.warn("using deprecated parameters for `initSync()`; pass a single object instead"));const t=c();e instanceof WebAssembly.Module||(e=new WebAssembly.Module(e));const n=new WebAssembly.Instance(e,t);return o(n,e)}async function w(e){if(i!==void 0)return i;typeof e<"u"&&(Object.getPrototypeOf(e)===Object.prototype?{module_or_path:e}=e:console.warn("using deprecated parameters for the initialization function; pass a single object instead")),typeof e>"u"&&(e=new URL("/assets/wasm_worker_bg-CS7AilxR.wasm",import.meta.url));const t=c();(typeof e=="string"||typeof Request=="function"&&e instanceof Request||typeof URL=="function"&&e instanceof URL)&&(e=fetch(e));const{instance:n,module:s}=await y(await e,t);return o(n,s)}export{l as add,w as default,p as divide,_ as initSync,g as multiply,d as subtract};
